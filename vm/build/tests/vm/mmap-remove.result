FAIL
Kernel panic in run: PANIC at ../../devices/disk.c:411 in select_sector(): assertion `sec_no < d->capacity' failed.
Call stack: 0x8004218334 0x800421440d 0x80042139c1 0x80042201fe 0x800421f1ff 0x8004221cd0 0x8004221a93 0x80042215db 0x80042214a1 0x800421d12a 0x800420920e 0x800420962c 0x4002f9 0x400e51 0x400e9a
Translation of call stack:
0x0000008004218334: debug_panic (lib/kernel/debug.c:32)
0x000000800421440d: select_sector (devices/disk.c:412)
0x00000080042139c1: disk_read (devices/disk.c:220)
0x00000080042201fe: inode_read_at (filesys/inode.c:205)
0x000000800421f1ff: file_read (filesys/file.c:75)
0x0000008004221cd0: lazy_load_mmap (vm/file.c:58)
0x0000008004221a93: uninit_initialize (vm/uninit.c:54 (discriminator 4))
0x00000080042215db: vm_do_claim_page (vm/vm.c:210)
0x00000080042214a1: vm_try_handle_fault (vm/vm.c:178)
0x000000800421d12a: page_fault (userprog/exception.c:147)
0x000000800420920e: intr_handler (threads/interrupt.c:352)
0x000000800420962c: intr_entry (threads/intr-stubs.o:?)
0x00000000004002f9: (unknown)
0x0000000000400e51: (unknown)
0x0000000000400e9a: (unknown)

This assertion commonly fails when accessing a file via an inode that
has been closed and freed.  Freeing an inode clears all its sector
indexes to 0xcccccccc, which is not a valid sector number for disks
smaller than about 1.6 TB.
